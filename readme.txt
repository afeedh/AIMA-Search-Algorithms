*************************
*   Problem Statement   *
*************************

A sliding-tile puzzle consists of three black tiles, three white tiles, and an 
empty space in the (sample) configuration shown below:

The puzzle has two legal moves with associated costs:

- A tile may move into an adjacent empty location. This has a cost of 1. 
- A tile can hop over one or two other tiles into the empty position.
This has a cost equal to the number of tiles jumped over.

-------------------------------------------
|  B  |  B  |  B  |     |  W  |  W  |  W  |
-------------------------------------------

The goal is to have all the white tiles to the left of all the black tiles. The 
position of the blank
is not important.

Q1. 1 Implement the above puzzle by accepting any valid configuration of the 
tiles and the empty space as the input.

Q1. 2 Propose a heuristic for the above problem and implement a heuristic 
search algorithm for the same input configuration.

Q 1. 3 You may compare the costs involved in the above two cases for the same 
input configuration.

Q1 4 Display the state space in all the cases in a diagram and highlight the 
path of lowest cost.

Q 1.5 Generate all the possible goal configurations and their associated costs 
for a given input.
Can you suggest any inference on the position of empty space in connection with 
the cost involved? Support your claims with examples generated by your programs.

*************************
*       How to run?     *
*************************

~> python3 -m main